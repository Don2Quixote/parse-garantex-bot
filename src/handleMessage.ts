import * as fs from 'fs'
import { TelegrafContext } from 'telegraf/typings/context'

let tg: TelegrafContext['telegram'] = null

let sheduledEnablingBot: NodeJS.Timeout = null

const sheduleEnablingBot = (timeout: number) => {
    if (!tg) return // No way "tg" is null
    sheduledEnablingBot = setTimeout(() => {
        process.env.status = 'on'
        tg.sendMessage(process.env.ADMIN_ID, '‚ÑπÔ∏è –ë–æ—Ç –≤–∫–ª—é—á–∏–ª—Å—è', {
            reply_markup: {
                keyboard: [
                    [ { text: 'üü¢' } ]
                ],
                resize_keyboard: true
            }
        })
    }, 1000 * 60 * timeout)
}

const cancelEnablingBot = () => {
    clearInterval(sheduledEnablingBot)
}

export default async (ctx: TelegrafContext) => {
    if (!ctx.message.text) return
    if (!tg) tg = ctx.telegram

    if (ctx.message.text.includes('/start')) {
        let replyText =
            'üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –ß—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å % –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 5.5\n' +
            '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /status, /on, /off'
        let buttonText
        if (process.env.status == 'on') buttonText = 'üü¢'
        else buttonText = 'üî¥' 
        ctx.reply(replyText, {
            reply_markup: {
                 keyboard: [
                     [ { text: buttonText } ]
                 ],
                 resize_keyboard: true
            }
        })
    } else if (!isNaN(+ctx.message.text)) {
        process.env.percent = parseFloat(ctx.message.text).toFixed(2)
        let replyText = 
            '‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ' + parseFloat(ctx.message.text).toFixed(2)
        ctx.reply(replyText)
    } else if (ctx.message.text.includes('/status')) {
       let replyText =
          (process.env.status == 'on' ? 'üü¢ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω.' : 'üî¥ –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω.') + ' ' +
          process.env.percent
        ctx.reply(replyText)
    } else if (ctx.message.text.includes('/on') || ctx.message.text == 'üî¥' ) {
        let replyText = ''
        if (process.env.status == 'on') {
            replyText =
                '‚ÑπÔ∏è –ë–æ—Ç —É–∂–µ –≤–∫–ª—é—á–µ–Ω'
        } else {
            cancelEnablingBot()
            process.env.status = 'on'
            replyText =
                '‚ÑπÔ∏è –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω'
        }
        let buttonText
        if (process.env.status == 'on') buttonText = 'üü¢'
        else buttonText = 'üî¥' 
        ctx.reply(replyText, {
            reply_markup: {
                 keyboard: [
                     [ { text: buttonText } ]
                 ],
                 resize_keyboard: true
            }
        })
    } else if (ctx.message.text.includes('/off') || ctx.message.text == 'üü¢') { 
        let replyText = ''
        if (process.env.status == 'off') {
            replyText =
                '‚ÑπÔ∏è –ë–æ—Ç —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω'
        } else {
            process.env.status = 'off'
            replyText =
                '‚ÑπÔ∏è –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω'
            let timeout = parseInt(ctx.message.text.split(' ')[1])
            if (timeout) {
                sheduleEnablingBot(timeout)
            }
        }
        let buttonText
        if (process.env.status == 'on') buttonText = 'üü¢'
        else buttonText = 'üî¥' 
        ctx.reply(replyText, {
            reply_markup: {
                 keyboard: [
                     [ { text: buttonText } ]
                 ],
                 resize_keyboard: true
            }
        })
    } else {
        let replyText =
            '‚ÑπÔ∏è –ß—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å % –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 5.5'
        ctx.reply(replyText)
    }
}
